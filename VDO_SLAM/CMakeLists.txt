cmake_minimum_required(VERSION 2.8)
project(vdo_slam)

set(PACKAGE_NAME ${PROJECT_NAME})
set(PACKAGE_LIB_PREFIX "obj_slam")
set(LIB_NAME ${PACKAGE_LIB_PREFIX}${PROJECT_NAME})



IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

MESSAGE("Build type: " ${CMAKE_BUILD_TYPE})

# ======  start c++ compile  ======

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall  -O3 -march=native ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall   -O3 -march=native")

# Check C++11 or C++0x support
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
   add_definitions(-DCOMPILEDWITHC11)
   message(STATUS "Using flag -std=c++11.")
elseif(COMPILER_SUPPORTS_CXX0X)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
   add_definitions(-DCOMPILEDWITHC0X)
   message(STATUS "Using flag -std=c++0x.")
else()
   message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake_modules)


find_package(OpenCV 3.0 QUIET)
if(NOT OpenCV_FOUND)
   find_package(OpenCV 2.4.3 QUIET)
   if(NOT OpenCV_FOUND)
      message(FATAL_ERROR "OpenCV > 2.4.3 not found.")
   endif()
endif()

find_package(Eigen3 3.1.0 REQUIRED)
find_package(CSparse REQUIRED)

include_directories(
   ${PROJECT_SOURCE_DIR}
   ${PROJECT_SOURCE_DIR}/include
   ${EIGEN3_INCLUDE_DIR}
   ${CSPARSE_INCLUDE_DIR}
)

set(PUBLIC_HEADER_FILES
    include/vdo_slam.hpp
    include/${PROJECT_NAME}/Converter.h
    include/${PROJECT_NAME}/Frame.h
    include/${PROJECT_NAME}/Map.h
    include/${PROJECT_NAME}/Optimizer.h
    include/${PROJECT_NAME}/ORBextractor.h
    include/${PROJECT_NAME}/System.h
    include/${PROJECT_NAME}/Scene.h
    include/${PROJECT_NAME}/Tracking.h

    include/${PROJECT_NAME}/cvplot/color.h
    include/${PROJECT_NAME}/cvplot/cvplot.h
    include/${PROJECT_NAME}/cvplot/figure.h
    include/${PROJECT_NAME}/cvplot/highgui.h
    include/${PROJECT_NAME}/cvplot/window.h
   include/${PROJECT_NAME}/cvplot/internal.h
)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)

add_library(${PROJECT_NAME} SHARED
   src/System.cc
   src/Tracking.cc
   src/ORBextractor.cc
   src/Converter.cc
   src/Map.cc
   src/Optimizer.cc
   src/Frame.cc
   src/Scene.cc

   src/cvplot/color.cc
   src/cvplot/figure.cc
   src/cvplot/highgui.cc
   src/cvplot/window.cc
)

target_link_libraries(
   ${PROJECT_NAME}
   ${OpenCV_LIBS}
   ${EIGEN3_LIBS}
   ${CSPARSE_LIBRARY}
   # for mac os (default)
   #${PROJECT_SOURCE_DIR}/dependencies/g2o/lib/libg2o.dylib
   # for linux (ubuntu)
   #${PROJECT_SOURCE_DIR}/dependencies/g2o/lib/libg2o.so
   -lvdoslam_g2o
)

# Configure target warnings (PRIVATE doesn't pass on options to targets linking to target)
target_compile_options(${PACKAGE_NAME} PRIVATE -Wno-psabi)

# Build example

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/example)

add_executable(vdo_slam_example
  example/vdo_slam.cc
)

target_link_libraries(vdo_slam_example ${PROJECT_NAME})



# Install library as an export target
install(TARGETS ${PACKAGE_NAME}
        EXPORT ${PROJECT_NAME}-export
        PUBLIC_HEADER DESTINATION include/${PROJECT_NAME}
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin
)


# Install Header Files
install(FILES ${PUBLIC_HEADER_FILES} DESTINATION include/${PROJECT_NAME})
install(FILES include/${PROJECT_NAME}.hpp DESTINATION include/${PACKAGE_NAME})



